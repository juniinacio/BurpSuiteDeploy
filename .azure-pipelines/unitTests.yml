parameters:
  os: ''
  pwsh: false

steps:
- task: NuGetAuthenticate@0

- task: PowerShell@2
  displayName: 'Register Private Repository'
  inputs:
    targetType: 'inline'
    script: |
      $n = 'BurpSuite'
      $url = "$(ARTIFACTS_URL)"
      if(-not (Get-PSRepository | Where-Object Name -eq $n)) {
          Register-PSRepository -Name $n -SourceLocation $url -InstallationPolicy Trusted -Verbose
      }
      Get-PSRepository
    pwsh: ${{ parameters.pwsh }}

- task: PowerShell@2
  displayName: 'Install BurpSuite'
  inputs:
    targetType: 'inline'
    script: |
        $n = "BurpSuite"
        $e = "$(ARTIFACTS_EMAIL)"
        $url = "$(ARTIFACTS_URL)"
        $pwd = ConvertTo-SecureString $Env:ARTIFACTS_PAT -AsPlainText -Force
        $creds = New-Object PSCredential($e, $pwd)

        # LINK: https://github.com/Microsoft/artifacts-credprovider
        # $Env:NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED = 'true'
        # $Env:VSS_NUGET_EXTERNAL_FEED_ENDPOINTS = '{{"endpointCredentials": [{{"endpoint":"{0}", "username":"{1}", "password":"{2}"}}]}}' -f $url, $e, $pwd

        Install-Module -Name "BurpSuite" -Repository $n -Credential $creds -Force -Scope CurrentUser
    pwsh: ${{ parameters.pwsh }}
  env:
    ARTIFACTS_PAT: $(ARTIFACTS_PAT)

- task: PowerShell@2
  displayName: 'Build Module $(ModuleName)'
  inputs:
    targetType: 'inline'
    script: './build.ps1 -Bootstrap'
    pwsh: ${{ parameters.pwsh }}

- task: PowerShell@2
  displayName: 'Set Module Path'
  inputs:
    targetType: 'inline'
    script: |
      $outputModVerDir = Split-Path -Path (Resolve-Path -Path ./.out/$(ModuleName)/*/*.psd1)
      Write-Host  "##vso[task.setvariable variable=outputModVerDir]$outputModVerDir"
    pwsh: ${{ parameters.pwsh }}

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage'
  inputs:
    summaryFileLocation: '**/$(ModuleName)-Coverage.xml'
    pathToSources: '$(outputModVerDir)'
    failIfCoverageEmpty: true
  condition: and(succeededOrFailed(), eq(variables['System.PullRequest.IsFork'], false))

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '**/$(ModuleName)-TestsResults.xml'
    testRunTitle: '${{ parameters.os }} Unit Tests'
  condition: succeededOrFailed()
